{"version":3,"file":"static/js/main.b53949e0.js","mappings":"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","sources":["mockedJson.js","index.js"],"sourcesContent":["/**\r\n * Loads a CSV from the database into memory. In the real program, this is where it would search through the\r\n * database and parse into an array for usage in the main program.\r\n *\r\n * @param filepath : The filepath to the CSV to be read\r\n *\r\n * @returns\r\n */\r\nfunction loadCSV(filepath) {\r\n    var data = dataMap.get(filepath);\r\n    if (data) {\r\n        currentCSV = data;\r\n        return 1;\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n}\r\n//The current CSV stored in memory\r\nvar currentCSV = [];\r\n//Mock datasets and map\r\nvar csvData1 = [\r\n    [1, 2, 3, 4, 5],\r\n    [\"The\", \"song\", \"remains\", \"the\", \"same.\"],\r\n];\r\nvar csvData2 = [\r\n    [\"First Name\", \"Last Name\", \"Class\", \"Role\"],\r\n    [\"Nim\", \"Telson\", \"CSCI 0320\", \"Student\"],\r\n    [\"Tim\", \"Nelson\", \"CSCI 0320\", \"Student\"]\r\n];\r\nvar dataMap = new Map();\r\ndataMap.set(\"mockedData1.csv\", csvData1);\r\ndataMap.set(\"mockedData2.csv\", csvData2);\r\n//Reset memory for testing purposes\r\nfunction resetCSV() {\r\n    currentCSV = [];\r\n}\r\n//getter method for currentCSV, avoid exposing the array\r\nfunction getCSV() {\r\n    return currentCSV;\r\n}\r\n/**\r\n * placeholder function for search, it should call the backend and return a 2D array.\r\n *\r\n * @param input The input string, which should contain the column and value to search for. Here, it does nothing.\r\n * @returns The search result for search\r\n */\r\nfunction searchCSV(input) {\r\n    var result = [];\r\n    result.push(currentCSV[0]);\r\n    return result;\r\n}\r\nexport { loadCSV, resetCSV, getCSV, searchCSV };\r\n","import { loadCSV, getCSV, searchCSV } from \"./mockedJson.js\";\r\nvar history = [];\r\n// The window.onload callback is invoked when the window is first loaded by the browser\r\nwindow.onload = function () {\r\n    // If you're adding an event for a button click, do something similar.\r\n    // The event name in that case is \"click\", not \"keypress\", and the type of the element\r\n    // should be HTMLButtonElement. The handler function for a \"click\" takes no arguments.\r\n    prepareButtonClick();\r\n};\r\n/**\r\n * Function to prepare the event handler for the submit button. It retrieves the button from\r\n * the HTML and checks if it is the correct button, before attatching the eventListener to\r\n * the button.\r\n *\r\n * @returns: void\r\n * @param: none\r\n */\r\nfunction prepareButtonClick() {\r\n    var button = document.getElementById(\"submit-button\");\r\n    if (button == null) {\r\n        console.log(\"Couldn't find input element\");\r\n    }\r\n    else if (!(button instanceof HTMLButtonElement)) {\r\n        console.log(\"Found element \".concat(button, \", but it wasn't an button\"));\r\n    }\r\n    else {\r\n        // Notice that we're passing *THE FUNCTION* as a value, not calling it.\r\n        // The browser will invoke the function when a key is pressed with the input in focus.\r\n        //  (This should remind you of the strategy pattern things we've done in Java.)\r\n        button.addEventListener(\"click\", handleButtonClick);\r\n    }\r\n}\r\n/**\r\n * The event handler for the submit button. If the text in the REPL field is \"get\", it will print out the\r\n * contents of mock.json, and if the text is \"stats\" it will print out the number of rows and columns\r\n * in the equivalent CSV. Otherwise, an error will output.\r\n *\r\n * @returns: void\r\n * @param: none\r\n */\r\nfunction handleButtonClick() {\r\n    var maybeInput = document.getElementById(\"repl-command-box\");\r\n    if (maybeInput == null) {\r\n        console.log(\"Couldn't find input element\");\r\n    }\r\n    else if (!(maybeInput instanceof HTMLInputElement)) {\r\n        console.log(\"Found element \".concat(maybeInput, \", but it wasn't an button\"));\r\n    }\r\n    else {\r\n        var command = maybeInput.value.split(\" \")[0];\r\n        if (command === \"view\") {\r\n            handleViewRequest(maybeInput.value);\r\n        }\r\n        else if (command === \"search\") {\r\n            handleSearchRequest(maybeInput.value);\r\n        }\r\n        else if (command === \"mode\") {\r\n            handleModeRequest();\r\n        }\r\n        else if (command === \"load_csv\") {\r\n            handleLoadRequest(maybeInput.value);\r\n        }\r\n        else {\r\n            var historyOutput = new Array();\r\n            if (mode == 1) {\r\n                historyOutput.push(\"<p>Command:\" + maybeInput.value + \"</p>\");\r\n            }\r\n            historyOutput.push(\"<p>Output: Not a valid command</p>\");\r\n            history.push(historyOutput);\r\n        }\r\n        renderHTML();\r\n    }\r\n}\r\n/**\r\n * This stuff is just copied over from Tim's site ^\r\n */\r\n/**\r\n * This is a helper fucntion that is used with view command as it takes the CSV data and orgnaizes it into an html table\r\n * string which is then returned by this function\r\n * @returns: this function returns the html table string\r\n */\r\nfunction tableConverter(csvData) {\r\n    var result = \"<table class = 'table'>\";\r\n    csvData.forEach(function (output) {\r\n        result += \"<tr>\";\r\n        output.forEach(function (thing) {\r\n            result += \"<td class = 'table'>\" + thing + \"</td>\";\r\n        });\r\n        result += \"</tr>\";\r\n    });\r\n    result += \"</table>\";\r\n    return result;\r\n}\r\n/**\r\n * A helper function to handle a get request. It will build a string with brackets denoting the contents of the\r\n * 2D array, and push it to the console history.\r\n *\r\n * @returns: void\r\n * @param: Input string to the command terminal, the string will be used to get the file path of the csv to be printed.\r\n */\r\nfunction handleViewRequest(input) {\r\n    var historyOutput = new Array();\r\n    if (mode == 1) {\r\n        historyOutput.push(\"<p>Command: \".concat(input, \"</p>\"));\r\n    }\r\n    var output = '';\r\n    if (mode == 1) {\r\n        output = '<p>Output: </p>';\r\n    }\r\n    else {\r\n        output = '';\r\n    }\r\n    if (getCSV().length != 0) {\r\n        historyOutput.push(output + tableConverter(getCSV()));\r\n    }\r\n    else {\r\n        historyOutput.push(\"<p>No CSV Loaded!</p>\");\r\n    }\r\n    history.push(historyOutput);\r\n}\r\n//mode 0 is brief, mode 1 is verbose\r\nvar mode = 0;\r\n/**\r\n * A helper function to handle a mode request. It will change the mode variable from 0 to 1 or 1 to 0, with 0 representing\r\n * brief mode and 1 representing verbose mode. It will then output a message to the terminal to signify what mode it has\r\n * been changed to.\r\n *\r\n * @returns: void\r\n */\r\nfunction handleModeRequest() {\r\n    if (mode == 0) {\r\n        mode = 1;\r\n        var historyOutput = new Array(\"<p>Changed to verbose mode</p>\");\r\n        history.push(historyOutput);\r\n    }\r\n    else {\r\n        mode = 0;\r\n        var historyOutput = new Array(\"<p>Changed to brief mode</p>\");\r\n        history.push(historyOutput);\r\n    }\r\n}\r\n/**\r\n * A helper function to handle a load_csv request. It will look through a database (in this case its mocked) and if it finds\r\n * the file specified, it will load the data into memory, and return a success error code, and return a failure error code\r\n * otherwise.\r\n *\r\n * @param input The filepath to be found\r\n */\r\nfunction handleLoadRequest(input) {\r\n    var historyOutput = new Array();\r\n    if (mode == 1) {\r\n        historyOutput.push(\"<p>Command: \".concat(input, \"</p>\"));\r\n    }\r\n    if (loadCSV(input.split(\" \")[1])) {\r\n        historyOutput.push(\"<p>CSV Loaded Successfully</p>\");\r\n    }\r\n    else {\r\n        historyOutput.push(\"<p>CSV filepath not found</p>\");\r\n    }\r\n    history.push(historyOutput);\r\n}\r\n/**\r\n * This is the search function that is called by when the command search is entered into field. As of right now\r\n * it is a mocked version as we havent input the backend fucntionlity but what this function does for now is\r\n * check if the csv is loaded in, and if it is not we send message to the user that we have not recived a csv\r\n * yet. Otherwise is the CSV is loaded in, we just print the first row of that csv no matter what to mock\r\n * what this fucntion would do\r\n */\r\nfunction handleSearchRequest(input) {\r\n    var historyOutput = new Array();\r\n    if (mode == 1) {\r\n        var modeChange = \"<p>Command: \".concat(input, \"</p>\");\r\n        historyOutput.push(modeChange);\r\n    }\r\n    var output = '';\r\n    if (mode == 1) {\r\n        output = '<p>Output: ';\r\n    }\r\n    else {\r\n        output = '<p>';\r\n    }\r\n    if (getCSV().length != 0) {\r\n        output += tableConverter(searchCSV(input)) + \"</p>\";\r\n    }\r\n    else {\r\n        output +=\r\n            \"Sorry we could not find a CSV file to serach :(, please try again</p>\";\r\n    }\r\n    historyOutput.push(output);\r\n    history.push(historyOutput);\r\n}\r\n/**\r\n * Handle other User Stories here:\r\n */\r\n/**\r\n * A helper function that renders the output onto the screen. It will update the internal HTML of the div that\r\n * represents the console history.\r\n *\r\n * @returns void\r\n * @param: none\r\n */\r\nfunction renderHTML() {\r\n    var newHtml = \"\";\r\n    // For every guess array in GUESSES...\r\n    history.forEach(function (output) {\r\n        output.forEach(function (line) {\r\n            newHtml += \"\".concat(line);\r\n        });\r\n    });\r\n    // Replace the contents of the old-rounds <div> with the HTML we generated above\r\n    // Since I prefer not to use \"id\" and use \"class\" instead here, we have to do [0]...\r\n    var oldREPLHistory = document.getElementById(\"repl-history\");\r\n    if (oldREPLHistory == null) {\r\n        console.log(\"Could not find old-REPL element\");\r\n        return;\r\n    }\r\n    else if (!(oldREPLHistory instanceof HTMLElement)) {\r\n        console.log(\"first old-REPL element was not an HTMLElement\");\r\n        return;\r\n    }\r\n    else {\r\n        oldREPLHistory.innerHTML = newHtml;\r\n    }\r\n}\r\nfunction clearHistory() {\r\n    history = [];\r\n    mode = 0;\r\n}\r\n// Provide this to other modules (e.g., for testing!)\r\n// The configuration in this project will require /something/ to be exported.\r\nexport { handleButtonClick, clearHistory };\r\n"],"names":["currentCSV","dataMap","Map","getCSV","set","history","handleButtonClick","maybeInput","document","getElementById","console","log","HTMLInputElement","command","value","split","input","historyOutput","Array","mode","push","concat","output","length","tableConverter","handleViewRequest","modeChange","result","searchCSV","handleSearchRequest","handleModeRequest","filepath","data","get","loadCSV","handleLoadRequest","newHtml","forEach","line","oldREPLHistory","HTMLElement","innerHTML","renderHTML","csvData","thing","window","onload","button","HTMLButtonElement","addEventListener","prepareButtonClick"],"sourceRoot":""}